#!/bin/sh
#
# Run tcsh builds using Docker images
#
# 20220513  Kimmo Suominen
#

set -eu

DOCKER_BUILDKIT=1
export DOCKER_BUILDKIT

Dockerfile()
{
    local os suite

    os="${1}"
    suite="${2}"

    expand <<EOF
# syntax=docker/dockerfile:1.4

FROM ${os}:${suite}
EOF

    case "${os}" in
    ubuntu)
	case "${suite}" in
	jammy|focal|bionic|xenial)
	    ;;
	*)
	    # ubuntu user added in lunar (23.04) can break existing Dockerfiles
	    # https://bugs.launchpad.net/cloud-images/+bug/2005129
	    expand <<EOF

RUN userdel -r ubuntu
EOF
	    ;;
	esac
	;;
    esac

    expand <<EOF

ARG DEBIAN_FRONTEND=noninteractive
ARG APT_LISTCHANGES_FRONTEND=none
RUN apt-get -qq update\
 && apt-get -qq install $(list_dependencies)\
 && apt-get -qq clean
EOF

    case "${suite}" in
    forky)
	expand <<EOF
RUN grep -q '^VERSION_ID=' /etc/os-release\
 || echo VERSION_ID=14 >> /etc/os-release
EOF
	;;
    trixie)
	expand <<EOF
RUN grep -q '^VERSION_ID=' /etc/os-release\
 || echo VERSION_ID=13 >> /etc/os-release
EOF
	;;
    esac

    expand <<EOF
RUN useradd -U -m builder

COPY --link docker-entrypoint /

USER builder:builder

ENTRYPOINT ["/docker-entrypoint"]
EOF
    case "${suite}" in
    xenial)
	expand <<EOF
CMD ["dpkg-buildpackage", "-nc"]
EOF
	;;
    *)
	expand <<EOF
CMD ["dpkg-buildpackage", "--no-sign", "-nc"]
EOF
	;;
    esac
}

die()
{
    echo "${PROG}: ${@}" 1>&2
    exit 1
}

list_dependencies()
{
    paste -sd ' ' <<-EOF
	build-essential
	debhelper
	devscripts
	jetring
	libncurses5-dev
	EOF
}

list_suites()
{
    local os

    os="${1}"

    case "${os}" in
    debian)		# Vers	EOL
	#echo forky	# 14	TBA
	echo trixie	# 13	TBA
	echo bookworm	# 12	2028-06-30
	echo bullseye	# 11	2026-06-30
	;;
    ubuntu)		# Vers	EOL
	#echo oracular	# 24.10	2025-07-20
	echo noble	# 24.04 2034-04-25
	echo jammy	# 22.04	2032-04-21
	echo focal	# 20.04	2030-04-23
	echo bionic	# 18.04	2028-04-26
	# dpkg-checkbuilddeps: error: Unmet build dependencies: autoconf
	#echo xenial	# 16.04	2026-04-23
	;;
    esac
}

maybe()
{
    if ${noop:-false}
    then
	echo - "${@}"
    else
	echo + "${@}"
	"${@}"
    fi
}

usage()
{
    cat <<EOF
Usage:	${PROG} [-hnv] [target]

Builds deb/* packages from the src/*.orig.tar.gz files for select
Debian and Ubuntu releases.

Options:

-h	Show this usage
-n	Do not build anything (no-op)
-v	Show docker build output (verbose)
EOF
}

PROG="${0##*/}"
PDIR="$(dirname $(realpath "${0}"))"
DEPT="${PDIR}/docker-entrypoint"

noop=
quiet_build=-q

while getopts hnv opt
do
    case "${opt}" in
    h)	usage; exit 0;;
    n)	noop=true;;
    v)	quiet_build=;;
    *)	usage 1>&2; exit 1;;
    esac
done
shift $((${OPTIND} - 1))

if [ ${#} -gt 1 ]
then
    usage 1>&2
    exit 2
fi

[ -f "${DEPT}" ] || die "${DEPT} not found"

[ -d deb ] || die 'Are you in the right place? No deb directory found.'
[ -d src ] || die 'Are you in the right place? No src directory found.'

here="$(realpath .)"

case "${1:-all}" in
all)
    ;;
debian|ubuntu)
    os_list="${1}"
    ;;
*)
    for os in debian ubuntu
    do
	if list_suites "${os}" | grep -q "^${1}$"
	then
	    os_list="${os}"
	    suite_list="${1}"
	    break
	fi
    done
    case "${os_list:-}" in
    '')
	die "Unknown target: ${1}"
	;;
    esac
    ;;
esac

first=true
for os in ${os_list:-debian ubuntu}
do
    for suite in ${suite_list:-$(list_suites "${os}")}
    do
	image="tcsh-build/${os}-${suite}"
	${first} && first=false || echo
	echo "* ${image}"
	dir="$(mktemp -d "${TMPDIR:-/tmp}/${PROG}-img-XXXXXXXXXX")"
	maybe install "${DEPT}" "${dir}/docker-entrypoint"
	Dockerfile "${os}" "${suite}" \
	| if ${noop:-false}
	then
	    sed 's/^/> /'
	else
	    cat > "${dir}/Dockerfile"
	fi
	maybe docker build ${quiet_build} -t "${image}" "${dir}"
	rm -rf "${dir}"

	pool="deb/${os}/pool/${suite}/main"
	[ -d "${pool}" ] && continue
	maybe mkdir -p "${pool}"

	maybe docker run --rm \
	    -v "${here}/src":/mnt/src \
	    -v "${here}/${pool}":/mnt/deb \
	    "${image}"

	[ -d "${pool}" ] && rmdir "${pool}" || :
    done
done
